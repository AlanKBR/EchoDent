"""empty message

Revision ID: 57e34a28f09b
Revises:
Create Date: 2025-10-27 11:23:51.256619

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '57e34a28f09b'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    insp = sa.inspect(bind)
    if 'fechamento_caixa' not in insp.get_table_names():
        op.create_table(
            'fechamento_caixa',
            sa.Column('data_fechamento', sa.Date(), nullable=False),
            sa.Column(
                'status',
                sa.Enum('ABERTO', 'FECHADO', name='caixa_status_enum'),
                server_default=sa.text("'ABERTO'"),
                nullable=False
            ),
            sa.Column(
                'saldo_apurado',
                sa.Numeric(precision=10, scale=2),
                nullable=True
            ),
            sa.PrimaryKeyConstraint('data_fechamento')
        )
    if 'pacientes' not in insp.get_table_names():
        op.create_table(
            'pacientes',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('nome_completo', sa.String(length=200), nullable=False),
            sa.Column('data_nascimento', sa.Date(), nullable=True),
            sa.Column('cpf', sa.String(length=14), nullable=True),
            sa.Column('telefone', sa.String(length=20), nullable=True),
            sa.Column('email', sa.String(length=120), nullable=True),
            sa.Column('cep', sa.String(length=9), nullable=True),
            sa.Column('logradouro', sa.String(length=200), nullable=True),
            sa.Column('numero', sa.String(length=20), nullable=True),
            sa.Column('complemento', sa.String(length=100), nullable=True),
            sa.Column('bairro', sa.String(length=120), nullable=True),
            sa.Column('cidade', sa.String(length=120), nullable=True),
            sa.Column('estado', sa.String(length=2), nullable=True),
            sa.Column('odontograma_inicial_json', sa.JSON(), nullable=True),
            sa.Column(
                'odontograma_inicial_data',
                sa.DateTime(timezone=True),
                nullable=True
            ),
            sa.PrimaryKeyConstraint('id'),
            sa.UniqueConstraint('cpf')
        )
    if 'procedimentos' not in insp.get_table_names():
        op.create_table(
            'procedimentos',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('nome', sa.String(length=200), nullable=False),
            sa.Column(
                'valor_padrao',
                sa.Numeric(precision=10, scale=2),
                nullable=False
            ),
            sa.Column(
                'is_active',
                sa.Boolean(),
                server_default=sa.text('1'),
                nullable=False
            ),
            sa.PrimaryKeyConstraint('id')
        )
    if 'anamneses' not in insp.get_table_names():
        op.create_table(
            'anamneses',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('paciente_id', sa.Integer(), nullable=False),
            sa.Column('alergias', sa.Text(), nullable=True),
            sa.Column('medicamentos_uso_continuo', sa.Text(), nullable=True),
            sa.Column('historico_doencas', sa.Text(), nullable=True),
            sa.Column(
                'has_red_flags',
                sa.Boolean(),
                server_default=sa.text('0'),
                nullable=False
            ),
            sa.Column(
                'status',
                sa.Enum('PENDENTE', 'CONCLUIDA', name='anamnese_status_enum'),
                server_default=sa.text("'PENDENTE'"),
                nullable=False
            ),
            sa.Column(
                'data_atualizacao',
                sa.DateTime(timezone=True),
                nullable=True
            ),
            sa.ForeignKeyConstraint(['paciente_id'], ['pacientes.id'], ),
            sa.PrimaryKeyConstraint('id'),
            sa.UniqueConstraint('paciente_id')
        )
    if 'media_pacientes' not in insp.get_table_names():
        op.create_table(
            'media_pacientes',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('paciente_id', sa.Integer(), nullable=False),
            sa.Column('file_path', sa.String(length=500), nullable=False),
            sa.Column('descricao', sa.String(length=255), nullable=True),
            sa.Column(
                'uploaded_at',
                sa.DateTime(timezone=True),
                nullable=False
            ),
            sa.ForeignKeyConstraint(['paciente_id'], ['pacientes.id'], ),
            sa.PrimaryKeyConstraint('id')
        )
    if 'odontograma_dente_estado' not in insp.get_table_names():
        op.create_table(
            'odontograma_dente_estado',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('paciente_id', sa.Integer(), nullable=False),
            sa.Column('tooth_id', sa.String(length=3), nullable=False),
            sa.Column('estado_json', sa.JSON(), nullable=False),
            sa.ForeignKeyConstraint(['paciente_id'], ['pacientes.id'], ),
            sa.PrimaryKeyConstraint('id'),
            sa.UniqueConstraint(
                'paciente_id',
                'tooth_id',
                name='uq_paciente_tooth_id'
            )
        )
    bind = op.get_bind()
    insp = sa.inspect(bind)
    existing_indexes = []
    if 'odontograma_dente_estado' in insp.get_table_names():
        existing_indexes = [
            ix['name'] for ix in insp.get_indexes('odontograma_dente_estado')
        ]
    with op.batch_alter_table('odontograma_dente_estado', schema=None) as batch_op:
        if 'ix_odontograma_dente_estado_paciente_id' not in existing_indexes:
            batch_op.create_index(
                batch_op.f('ix_odontograma_dente_estado_paciente_id'),
                ['paciente_id'],
                unique=False
            )
        if 'ix_odontograma_dente_estado_tooth_id' not in existing_indexes:
            batch_op.create_index(
                batch_op.f('ix_odontograma_dente_estado_tooth_id'),
                ['tooth_id'],
                unique=False
            )

    if 'planos_tratamento' not in insp.get_table_names():
        op.create_table(
            'planos_tratamento',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('paciente_id', sa.Integer(), nullable=False),
            sa.Column('dentista_id', sa.Integer(), nullable=True),
            sa.Column(
                'status',
                sa.Enum('PROPOSTO', 'APROVADO', 'CONCLUIDO', 'CANCELADO', name='status_plano_enum'),
                server_default=sa.text("'PROPOSTO'"),
                nullable=False
            ),
            sa.Column(
                'subtotal',
                sa.Numeric(precision=10, scale=2),
                nullable=False
            ),
            sa.Column(
                'desconto',
                sa.Numeric(precision=10, scale=2),
                server_default=sa.text('0'),
                nullable=False
            ),
            sa.Column(
                'valor_total',
                sa.Numeric(precision=10, scale=2),
                nullable=False
            ),
            sa.Column(
                'created_at',
                sa.DateTime(timezone=True),
                nullable=False
            ),
            sa.ForeignKeyConstraint(['paciente_id'], ['pacientes.id'], ),
            sa.PrimaryKeyConstraint('id')
        )
    if 'timeline_evento' not in insp.get_table_names():
        op.create_table(
            'timeline_evento',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('paciente_id', sa.Integer(), nullable=True),
            sa.Column('usuario_id', sa.Integer(), nullable=True),
            sa.Column(
                'timestamp',
                sa.DateTime(timezone=True),
                server_default=sa.text('(CURRENT_TIMESTAMP)'),
                nullable=False
            ),
            sa.Column('evento_tipo', sa.String(length=50), nullable=False),
            sa.Column('descricao', sa.Text(), nullable=False),
            sa.Column(
                'evento_contexto',
                sa.Enum('PACIENTE', 'SISTEMA', name='timeline_contexto_enum'),
                server_default='PACIENTE',
                nullable=False
            ),
            sa.ForeignKeyConstraint(['paciente_id'], ['pacientes.id'], ),
            sa.PrimaryKeyConstraint('id')
        )
    existing_indexes = []
    if 'timeline_evento' in insp.get_table_names():
        existing_indexes = [ix['name'] for ix in insp.get_indexes('timeline_evento')]
    with op.batch_alter_table('timeline_evento', schema=None) as batch_op:
        if 'ix_timeline_evento_evento_tipo' not in existing_indexes:
            batch_op.create_index(
                batch_op.f('ix_timeline_evento_evento_tipo'),
                ['evento_tipo'],
                unique=False
            )
        if 'ix_timeline_evento_paciente_id' not in existing_indexes:
            batch_op.create_index(
                batch_op.f('ix_timeline_evento_paciente_id'),
                ['paciente_id'],
                unique=False
            )
        if 'ix_timeline_evento_timestamp' not in existing_indexes:
            batch_op.create_index(
                batch_op.f('ix_timeline_evento_timestamp'),
                ['timestamp'],
                unique=False
            )
        if 'ix_timeline_evento_usuario_id' not in existing_indexes:
            batch_op.create_index(
                batch_op.f('ix_timeline_evento_usuario_id'),
                ['usuario_id'],
                unique=False
            )

    if 'itens_plano' not in insp.get_table_names():
        op.create_table(
            'itens_plano',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('plano_id', sa.Integer(), nullable=False),
            sa.Column('procedimento_id', sa.Integer(), nullable=False),
            sa.Column(
                'procedimento_nome_historico',
                sa.String(length=255),
                server_default=sa.text("'Procedimento não definido'"),
                nullable=False
            ),
            sa.Column('valor_cobrado', sa.Numeric(precision=10, scale=2), nullable=False),
            sa.Column('descricao_dente_face', sa.String(length=50), nullable=True),
            sa.ForeignKeyConstraint(['plano_id'], ['planos_tratamento.id'], ),
            sa.ForeignKeyConstraint(['procedimento_id'], ['procedimentos.id'], ),
            sa.PrimaryKeyConstraint('id')
        )
    if 'lancamentos_financeiros' not in insp.get_table_names():
        op.create_table(
            'lancamentos_financeiros',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('plano_id', sa.Integer(), nullable=False),
            sa.Column('valor', sa.Numeric(precision=10, scale=2), nullable=False),
            sa.Column('metodo_pagamento', sa.String(length=50), nullable=False),
            sa.Column(
                'tipo_lancamento',
                sa.Enum('PAGAMENTO', 'AJUSTE', name='lancamento_tipo_enum'),
                server_default=sa.text("'PAGAMENTO'"),
                nullable=False
            ),
            sa.Column('notas_motivo', sa.Text(), nullable=True),
            sa.Column(
                'data_lancamento',
                sa.DateTime(),
                server_default=sa.text('(CURRENT_TIMESTAMP)'),
                nullable=False
            ),
            sa.Column('lancamento_estornado_id', sa.Integer(), nullable=True),
            sa.ForeignKeyConstraint(['lancamento_estornado_id'], ['lancamentos_financeiros.id'], ),
            sa.ForeignKeyConstraint(['plano_id'], ['planos_tratamento.id'], ),
            sa.PrimaryKeyConstraint('id')
        )
    existing_indexes = []
    if 'lancamentos_financeiros' in insp.get_table_names():
        existing_indexes = [ix['name'] for ix in insp.get_indexes('lancamentos_financeiros')]
    with op.batch_alter_table('lancamentos_financeiros', schema=None) as batch_op:
        if 'ix_lancamentos_financeiros_lancamento_estornado_id' not in existing_indexes:
            batch_op.create_index(
                batch_op.f('ix_lancamentos_financeiros_lancamento_estornado_id'),
                ['lancamento_estornado_id'],
                unique=False
            )

    if 'parcela_prevista' not in insp.get_table_names():
        op.create_table(
            'parcela_prevista',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('plano_id', sa.Integer(), nullable=False),
            sa.Column('data_vencimento', sa.Date(), nullable=False),
            sa.Column(
                'valor_previsto',
                sa.Numeric(precision=10, scale=2),
                nullable=False
            ),
            sa.Column('observacao', sa.String(length=100), nullable=True),
            sa.ForeignKeyConstraint(['plano_id'], ['planos_tratamento.id'], ),
            sa.PrimaryKeyConstraint('id')
        )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('parcela_prevista')
    with op.batch_alter_table('lancamentos_financeiros', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_lancamentos_financeiros_lancamento_estornado_id'))

    op.drop_table('lancamentos_financeiros')
    op.drop_table('itens_plano')
    with op.batch_alter_table('timeline_evento', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_timeline_evento_usuario_id'))
        batch_op.drop_index(batch_op.f('ix_timeline_evento_timestamp'))
        batch_op.drop_index(batch_op.f('ix_timeline_evento_paciente_id'))
        batch_op.drop_index(batch_op.f('ix_timeline_evento_evento_tipo'))

    op.drop_table('timeline_evento')
    op.drop_table('planos_tratamento')
    with op.batch_alter_table('odontograma_dente_estado', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_odontograma_dente_estado_tooth_id'))
        batch_op.drop_index(batch_op.f('ix_odontograma_dente_estado_paciente_id'))

    op.drop_table('odontograma_dente_estado')
    op.drop_table('media_pacientes')
    op.drop_table('anamneses')
    op.drop_table('agendamentos')
    op.drop_table('procedimentos')
    op.drop_table('pacientes')
    op.drop_table('fechamento_caixa')
    # ### end Alembic commands ###
